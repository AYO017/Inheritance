			Inheritance
ðŸ‘€ Inheritance can be defined as the process where one class acquires the properties of another.
ðŸ‘€ With the use of inheritance the information is made manageable in a hierarchical order.
ðŸ‘€The class which inherits the properties of the other is know as subclass, derived class or child class.
ðŸ‘€ The class whose properties are inherited from is know as superclass, base class or parent class.

*********KEY WORD*****************************************************************************************
ðŸ‘€Extends

Syntax

class Super {
   .....
   .....
}
class Sub extends Super {
   .....
   .....
}
**********************************************************************************************************
*************************NOTE*****************************************************************************
ðŸ‘€A subclass inherits all the members (fields, methods, and nested classes) from its superclass. 
ðŸ‘€Constructors are not members, so they are not inherited by subclasses, 
ðŸ‘€but the constructor of the superclass can be invoked from the subclass.

Public Access Modifier - Private
ðŸ‘€A class, method, constructor, interface, etc. 
ðŸ‘€declared public can be accessed from any other class. 
ðŸ‘€Therefore, fields, methods, blocks declared inside a public class 
ðŸ‘€can be accessed from any class belonging to the Java Universe.******************************************

Protected Access Modifier - Protected
ðŸ‘€Variables, methods, and constructors, 
ðŸ‘€which are declared protected in a superclass 
ðŸ‘€can be accessed only by the subclasses in other package 
ðŸ‘€or any class within the package of the protected members' class.*****************************************

Private Access Modifier - Private
Methods, variables, and constructors 
that are declared private can only be accessed within the declared class itself.
Private access modifier is the most restrictive access level.
NB####Class and interfaces cannot be private.#####*********************************************************



